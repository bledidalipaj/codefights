"""
Description
***********
JACKPOT! You have just stumbled upon a collection of activation keys for the world's most used software of 2016! Like any responsible member 
of the Internet of Things in today's economy, you take it upon yourself to craft a keygen based on these keys so that you can begin reselling 
them to a less technologically inclined audience (or giving them away for free if you're that type of person).

Each key has the following format: XXXX-XXXX-XXXX-XXXX, where XXXX is called a set. Given array start, the ith set can be generated by modifying 
start[i] four times as follows (assume that xi = start[i]):

don't change x; its hexadecimal value is xi1
if x is even, change it to (x + 2) % 16, otherwise change it to (x - 2) % 16; its hexadecimal value is xi2;
if x is prime, change it to (x * 4) % 16, otherwise change it to (x / 4) % 16; its hexadecimal value is xi3;
if 15 is divisible by x, change x to (x + 8) % 16, otherwise change it to (x - 8) % 16; its hexadecimal value is xi4.
The key obtained this way is:
x11x12x13x14-x22x23x24x21-x33x34x31x32-x44x41x42x43.

Given array start, generate a key from it.

Example

For start = [8, 10, 2, 6], the output should be
genKey(start) = "8A2A-C3BA-1924-A682".

Here's how the first set is generated:

hexadecimal of 8 is 8;
x is even, so it should be changed to 8 + 2 = 10, hexadecimal of which is 'A';
10 is not prime, so it should be changed to 10 / 4 = 2, hexadecimal of which is 2;
15 is not divisible by 2, so 2 should be changed to 2 + 8, hexadecimal of which is 'A'.
Other sets can be obtained similarly.

Input/Output

[time limit] 4000ms (js)
[input] array.integer start

Array of 4 values in range [1..15] each.

Constraints:
start.length = 4,
1 ≤ start[i] ≤ 15.

[output] string

A key generated as explained above.

# Challenge's link: https://codefights.com/challenge/JdddwvmnWXKMn9jYy/main #
"""

def genKey(start):
    res = []
    i = 0

    for num in start:
        s = hex(num)[2:].upper()
        
        if num % 2 == 0:
            num = (num + 2) % 16
        else:
            num = (num - 2) % 16
        s += hex(num)[2:].upper()
        
        if num in [2, 3, 5, 7, 11, 13]:
            num = (num * 4) % 16
        else:
            num = (num / 4) % 16
        s += hex(num)[2:].upper()
        
        if num != 0 and 15 % num == 0:
            num = (num + 8) % 16
        else:
            num = (num - 8) % 16
        s += hex(num)[2:].upper()
        
        res.append(s[i:] + s[:i])
        i += 1
    return '-'.join(res)